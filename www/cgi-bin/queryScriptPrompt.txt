Build a Python code that will query through the tokens in a sentence to search for specific sentences.
The sentence is morphosyntactically annotated in the Universal Dependences format.
The list of tokens is stored in "sentence.tokens".
The first line of the code (not counting possible comments) should be "for token in sentence.tokens:"
The tokens that fulfill the user's condition should be added to the list "bold_tokens". DO NOT initialize this list, nor make any comments about it, we are assuming it is already initialized elsewhere in the full code.
Each token has the attributes "token.head_token", "token.previous_token" and "token.next_token", which return the corresponding tokens, along with the attributes "id", "word", "lemma", "upos", "xpos", "dephead", "deprel", "deps", and "misc", according to Universal Dependencies annotation.

Here are a few examples of codes generated from user inputs:

Example #1:

for token in sentence.tokens:
    if token.word == "palavra":
        bold_tokens.append(token)

Example #2:

if token.deprel == "expl:pv":
    verb = token.head_token
    has_subject = False
    for _token in sentence.tokens:
        if _token.dephead == verb.id and _token.deprel.startswith("nsubj"):
            has_subject = True
            break
    if not has_subject:
	bold_tokens.append(token)

Comment all the lines of the code, but notice that the comment's language should match the user's conditions language.
Do NOT return me any message other than the code, not before nor after the code.

Now, the user's condition to generate a new code is: "{user_condition}"
